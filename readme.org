* Integration Cpp with python


- register module from c++ file
- make sure project name and registered python module is the same for now.

  

* Look into cppimport python library which leverages pybind11

[[https://github.com/tbenthompson/cppimport][githug repo here]]




* What is the difference between unique and shared pointer?

- both are smart pointers
- both point to an object (allocated on the heap)

- for shared pointer, there may exist multiple pointers pointing to the same object
- for unique pointer this is not possible, only one pointer may point to object

- both will deallocate objext they point at if object can no longer be rerferenced
- difference is that object will be freed when last instance of shared pointer is destroyed



In test/, compile with cmake yielding a shared library.
In ext/, compile with setuptools to create a python module.




* libtorch ownership model

How are subclasses of torch::nn::Module passed around? How does the ownership model look like?

can pass by value or by reference


*Stack allocation of module*
#+begin_src cpp
struct Net : torch::nn::Module { };

void a(Net net) { }
void b(Net& net) { }
void c(Net* net) { }

int main() {
  Net net;
  a(net);  // passed by value, copy made
  a(std::move(net));  // move semantics
  b(net);  // passing by reference
  c(&net);  // passing pointer to object
}

#+end_src



need shared ownership when deriving from torch::nn::Module since the base class needs to know about registered modules to use the member functions defined for Module -> base class stores modules as shared_ptr and thereforer, concrete / derived class must do so too

That is when calling 

#+begin_src c++
:linear(register_moduel("linear"), torch::nn::Linear(M,N))
#+end_src

this creates a shared pointer to the submodule (more explicitly to torch::nn::LinearImpl)
The above is equivalent to


#+begin_src c++
:linear(register_moduel("linear"), std::shared_ptr<torch::nn::LinearImpl>>(M,N))
#+end_src
